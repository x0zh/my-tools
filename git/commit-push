#!/bin/bash
#version: v1.4.0
#author: zxbetter
#license: MIT
#contact: zhangxinbetter@gmail.com
#site: https://zxbetter.github.io
#time: 2020-08-21 16:00:00
# -----------------------------------------------------------------------------
# git status ==> git add . ==> git commit ==> git push
# ------------------------------------------------------------------------------

set -eo pipefail

SCRIPTPATH=$(
    cd "$(dirname "$0")"
    pwd
)

# 根路径
export APP_HOME="${SCRIPTPATH%/my-tools/*}/my-tools"
# 引入git通用模块
# shellcheck source=/dev/null
. "${APP_HOME}/utils/common"

# 定义变量
# 当前分支
CURRENT_BRANCH=$(git_current_branch)
# commit信息
COMMIT_MSG=()
# 默认的commit信息
DEFAULT_COMMIT_MSG="Update changes $(date '+%Y-%m-%d %H:%M:%S')"
# 交互式的标识，如果是true，则执行完git status命令后会提示是否继续
INTERACTIVE_FLAG=false
LOOP_INDEX=0

# 定义函数
# 帮助函数
helpu() {
    cat <<EOF

usage: $0 [option]

提交当前分支的变更，并推送到远程。

OPTIONS:
  [--interactive | -i]                 交互式执行
  [-m                ] <commitMessage>   指定提交信息
  [--help        | -h]                 帮助
EOF

    exit
}

# 解析参数
while true; do
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        helpu
    elif [ "$1" = "-m" ]; then
        COMMIT_MSG[$((LOOP_INDEX++))]="${1}"
        COMMIT_MSG[$((LOOP_INDEX++))]="${2}"
        shift 2
    elif [ "$1" = "--interactive" ] || [ "$1" = "-i" ]; then
        INTERACTIVE_FLAG=true
        shift 1
    else
        break
    fi
done

# 执行逻辑

notice_msg "Current branch: ${CURRENT_BRANCH}"

notice_msg "[1]Status:"
git status

if [ "${INTERACTIVE_FLAG}" = "true" ]; then
    confirm_go_on "是否继续"
fi

# Add changes to git
notice_msg "[2]Add ..."
git add .

# Commit changes
if [ ${#COMMIT_MSG[@]} -eq 0 ]; then
    COMMIT_MSG[$((LOOP_INDEX++))]="-m"
    if [ "${INTERACTIVE_FLAG}" = "true" ]; then
        while true; do
            read -p "请输入提交信息(或者输入d使用默认提交信息): " msg
            if [ "d" = "${msg}" ]; then
                COMMIT_MSG[$((LOOP_INDEX++))]="${DEFAULT_COMMIT_MSG}"
                break
            elif [ ! "X${msg}" = "X" ]; then
                COMMIT_MSG[$((LOOP_INDEX++))]="${msg}"
                break
            fi
        done
    else
        COMMIT_MSG[$((LOOP_INDEX++))]="${DEFAULT_COMMIT_MSG}"
    fi
fi

notice_msg "[3]Commit ..."
git commit "${COMMIT_MSG[@]}"

# Push changes to remote
if [ "${INTERACTIVE_FLAG}" = "true" ]; then
    confirm_go_on "是否推送到远程"
fi

notice_msg "[4]Push ..."
git push

notice_msg "Completed!"
